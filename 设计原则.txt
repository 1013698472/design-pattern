7个常用的面向对象的设计原则
("#"后的是我对其简单的理解)
单一职责原则(single responsibility principle,SRP)
    一个对象应该只包含单一的职责,并且该职责被完整的封装在一个类中
    # 减小代码业务的粒度,降低耦合,提高复用性
开闭原则(open-closed principle,OCP)
    软件实体应该对扩展开放,对修改关闭
    # 扩展业务时无需修改以前的代码
里氏代换原则(liskov substitution principle,LSP)
    所有引用基类的地方必须能透明地使用其子类
    # 和开闭原则一致
依赖倒转原则(dependence inversion principle,DIP)
    高层模块不应该依赖低层模块,它们都应该依赖抽象
    抽象不应该依赖于细节,细节应该依赖于抽象
    # 提高代码的复用性,符合开闭原则
接口隔离原则(interface segregation principle,ISP)
    客户端不应该依赖那些它不需要的接口
    # 与单一职责,迪米特法则一致
合成复用原则(composite reuse principle,CRP)
    优先使用对象组合,而不是通过继承来达到复用的目的
    # 和开闭原则一致,提高代码的复用性,降低耦合
迪米特法则(law of Demeter,LoD)
    每一个软件对其它单位都只有最少的知识,
    而且局限于那些与本单位密切相关的软件单位
    # 降低耦合度

#   以上七个设计原则基本上都围绕降低耦合度,提高复用性几个方面
    七个原则其实是七个建议,低耦合,高可用